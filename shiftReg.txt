library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

entity shiftregister is

Port(clk,rst in std_logic;

s: in std_logic_vector(3 downto 0);

m: in std_logic_vector(1 downto 0); y: out std_logic_vector(3 downto 0));

end shiftregister;

architecture Behavioral of shiftregister is

signalt std_logic_vector(3 downto 0);

begin

mode

process(clk, rst)

begin

if rst =^ * 1 ^ * then

y <=^ prime prime theta*theta*theta theta^ prime prime

elsif clk'event and clk '1' then case mis when "00" => SISO t(3) <= s(theta) LSB as input s(theta) t(2) <= t(3) ; t(1) <= t(2) t(theta) <= t(1) y(theta) <= t(theta) -- LSB as output Y(theta)

when " theta1^ prime prime => - S * IP * 0 t(3) <= s(theta) ; t(2) <= t(3) ; t(1) <= t(2) ; t(theta) <= t(1) y <= t -- parallel output LSB as input S(0)

when " 10 "=> t <= s y <= t PIPO

when "11" => -- PISO t <= 5; 4 bit input S & t <= S t(2) <= t(3) ; -- MSB input as t(3) <= S(3) t(1) <= t(2) ;

t(theta) <= t(1)

y(3) <= t(theta) ; MSB as output Y(3) <=

S(3)

when others => NULL;

end case;

end if;

end process;

end Behavioral;